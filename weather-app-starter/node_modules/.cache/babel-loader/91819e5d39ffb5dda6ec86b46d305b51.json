{"ast":null,"code":"export const dateFormatter = unixDate => {\n  const today = new Date().toLocaleString(\"en-GB\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n  });\n  const newDate = new Date(unixDate * 1000);\n  const dateLong = newDate.toLocaleString(\"en-GB\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n  });\n  console.log(newDate);\n  const time = newDate.toString().split(\"\").reverse().join(\"\").slice(45, 49).split(\"\").reverse().join(\"\");\n\n  if (today === dateLong) {\n    return {\n      date: \"Today\",\n      time: time,\n      newDate: newDate\n    };\n  } else {\n    return {\n      date: dateLong,\n      time: time,\n      newDate: newDate\n    };\n  }\n};\nexport const getMonthDay = dateArr => {\n  const dayMonthTimeArr = [];\n  dateArr.map(unixDate => {\n    const date = new Date(unixDate * 1000);\n    const time = date.toString().split(\"\").reverse().join(\"\").slice(43, 48).split(\"\").reverse().join(\"\");\n    const month = date.getMonth() + 1;\n    const weekday = date.toLocaleDateString(\"en-GB\", {\n      weekday: \"short\"\n    });\n    const day = date.getDay() + 1;\n    let str = `${weekday} ${day}/${month} ${time}`;\n    dayMonthTimeArr.push(str);\n  });\n  return dayMonthTimeArr;\n};","map":{"version":3,"sources":["/home/dcist123/Documents/fbw-28/REACTJS/react-projects/weather-app-starter/src/DateFormater.js"],"names":["dateFormatter","unixDate","today","Date","toLocaleString","weekday","year","month","day","newDate","dateLong","console","log","time","toString","split","reverse","join","slice","date","getMonthDay","dateArr","dayMonthTimeArr","map","getMonth","toLocaleDateString","getDay","str","push"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAIC,QAAD,IAAc;AACzC,QAAMC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,cAAX,CAA0B,OAA1B,EAAmC;AAC/CC,IAAAA,OAAO,EAAE,MADsC;AAE/CC,IAAAA,IAAI,EAAE,SAFyC;AAG/CC,IAAAA,KAAK,EAAE,MAHwC;AAI/CC,IAAAA,GAAG,EAAE;AAJ0C,GAAnC,CAAd;AAMA,QAAMC,OAAO,GAAG,IAAIN,IAAJ,CAASF,QAAQ,GAAG,IAApB,CAAhB;AACA,QAAMS,QAAQ,GAAGD,OAAO,CAACL,cAAR,CAAuB,OAAvB,EAAgC;AAC/CC,IAAAA,OAAO,EAAE,MADsC;AAE/CC,IAAAA,IAAI,EAAE,SAFyC;AAG/CC,IAAAA,KAAK,EAAE,MAHwC;AAI/CC,IAAAA,GAAG,EAAE;AAJ0C,GAAhC,CAAjB;AAMAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,QAAMI,IAAI,GAAGJ,OAAO,CACjBK,QADU,GAEVC,KAFU,CAEJ,EAFI,EAGVC,OAHU,GAIVC,IAJU,CAIL,EAJK,EAKVC,KALU,CAKJ,EALI,EAKA,EALA,EAMVH,KANU,CAMJ,EANI,EAOVC,OAPU,GAQVC,IARU,CAQL,EARK,CAAb;;AASA,MAAIf,KAAK,KAAKQ,QAAd,EAAwB;AACtB,WAAO;AAAES,MAAAA,IAAI,EAAE,OAAR;AAAiBN,MAAAA,IAAI,EAAEA,IAAvB;AAA6BJ,MAAAA,OAAO,EAAEA;AAAtC,KAAP;AACD,GAFD,MAEO;AACL,WAAO;AAAEU,MAAAA,IAAI,EAAET,QAAR;AAAkBG,MAAAA,IAAI,EAAEA,IAAxB;AAA8BJ,MAAAA,OAAO,EAAEA;AAAvC,KAAP;AACD;AACF,CA7BM;AA+BP,OAAO,MAAMW,WAAW,GAAIC,OAAD,IAAa;AACtC,QAAMC,eAAe,GAAG,EAAxB;AACAD,EAAAA,OAAO,CAACE,GAAR,CAAatB,QAAD,IAAc;AACxB,UAAMkB,IAAI,GAAG,IAAIhB,IAAJ,CAASF,QAAQ,GAAG,IAApB,CAAb;AACA,UAAMY,IAAI,GAAGM,IAAI,CACdL,QADU,GAEVC,KAFU,CAEJ,EAFI,EAGVC,OAHU,GAIVC,IAJU,CAIL,EAJK,EAKVC,KALU,CAKJ,EALI,EAKA,EALA,EAMVH,KANU,CAMJ,EANI,EAOVC,OAPU,GAQVC,IARU,CAQL,EARK,CAAb;AASA,UAAMV,KAAK,GAAGY,IAAI,CAACK,QAAL,KAAkB,CAAhC;AACA,UAAMnB,OAAO,GAAGc,IAAI,CAACM,kBAAL,CAAwB,OAAxB,EAAiC;AAAEpB,MAAAA,OAAO,EAAE;AAAX,KAAjC,CAAhB;AACA,UAAMG,GAAG,GAAGW,IAAI,CAACO,MAAL,KAAgB,CAA5B;AACA,QAAIC,GAAG,GAAI,GAAEtB,OAAQ,IAAGG,GAAI,IAAGD,KAAM,IAAGM,IAAK,EAA7C;AACAS,IAAAA,eAAe,CAACM,IAAhB,CAAqBD,GAArB;AACD,GAhBD;AAiBA,SAAOL,eAAP;AACD,CApBM","sourcesContent":["export const dateFormatter = (unixDate) => {\n  const today = new Date().toLocaleString(\"en-GB\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n  const newDate = new Date(unixDate * 1000);\n  const dateLong = newDate.toLocaleString(\"en-GB\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n  console.log(newDate);\n  const time = newDate\n    .toString()\n    .split(\"\")\n    .reverse()\n    .join(\"\")\n    .slice(45, 49)\n    .split(\"\")\n    .reverse()\n    .join(\"\");\n  if (today === dateLong) {\n    return { date: \"Today\", time: time, newDate: newDate };\n  } else {\n    return { date: dateLong, time: time, newDate: newDate };\n  }\n};\n\nexport const getMonthDay = (dateArr) => {\n  const dayMonthTimeArr = [];\n  dateArr.map((unixDate) => {\n    const date = new Date(unixDate * 1000);\n    const time = date\n      .toString()\n      .split(\"\")\n      .reverse()\n      .join(\"\")\n      .slice(43, 48)\n      .split(\"\")\n      .reverse()\n      .join(\"\");\n    const month = date.getMonth() + 1;\n    const weekday = date.toLocaleDateString(\"en-GB\", { weekday: \"short\" });\n    const day = date.getDay() + 1;\n    let str = `${weekday} ${day}/${month} ${time}`;\n    dayMonthTimeArr.push(str);\n  });\n  return dayMonthTimeArr;\n};\n"]},"metadata":{},"sourceType":"module"}