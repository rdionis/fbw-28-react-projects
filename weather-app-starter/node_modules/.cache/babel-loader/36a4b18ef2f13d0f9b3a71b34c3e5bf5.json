{"ast":null,"code":"var _jsxFileName = \"/home/dcist123/Documents/fbw-28/REACTJS/react-projects/weather-app-starter/src/components/Main.jsx\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Context from \"../Context\";\nimport Header from \"./Header\";\nimport Tagline from \"./Tagline\";\nimport Content from \"./Content\";\nimport WeatherSearch from \"./WeatherSearch\";\nimport WeatherData from \"./WeatherData\";\nimport DateTime from \"./DateTime\";\nimport Error from \"./Error\";\nimport Footer from \"./Footer\"; //this file contains all the core functionality for this app\n//it is the convention to make certain variables uppercase and anything you store your API KEYS inside of just tends to be uppercase ---> it is just a convention\n\nconst Main = () => {\n  const [weather, setWeather] = useState();\n  const [city, setCity] = useState();\n  const [error, setError] = useState();\n  /*this is the same as this:\n  const weather = useState [0] ---> 'weather' is the name of our state\n  const setWeather = useState [1] ---> 'setWeather' is the function that you can use in order to update the state | this second argument acts like the setState method in the Class Components */\n  //this syntax is known as array destructuring in JavaScript\n\n  const api_call = async e => {\n    e.preventDefault();\n    const location = e.target.elements.location.value;\n    if (!location) return setError(\"Please enter location.\");\n    setWeather(null);\n    const API_KEY = \"8e0aa905ce144f49bf1a5f4c95149722\";\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${API_KEY}&units=metric`;\n    const request = axios.get(url); //axios is a promise-based library\n\n    const response = await request;\n    setWeather(response.data.main);\n    console.log(response.data);\n    setCity(response.data.name);\n    setError(response.error);\n  };\n\n  weather && console.log(weather); // useEffect(() => {\n  //   api_call();\n  // }, []);\n  // this empty array argument is going to make sure that this useEffect hook acts like the componentDidUpdate; it isn't really a good idea to compare hooks to life cycle methods: yes, they do behave similarly but they should be looked at as their own entity. So here we are telling this useEffect hook to only execute this api_call method when the Main component first renders onto the screen, and we are doing that by giving it a second argument, which is an empty array\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DateTime, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tagline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      api_call,\n      weather,\n      city,\n      error\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WeatherSearch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), weather && /*#__PURE__*/React.createElement(WeatherData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }\n  }), error && /*#__PURE__*/React.createElement(Error, {\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Main;","map":{"version":3,"sources":["/home/dcist123/Documents/fbw-28/REACTJS/react-projects/weather-app-starter/src/components/Main.jsx"],"names":["React","useState","axios","Context","Header","Tagline","Content","WeatherSearch","WeatherData","DateTime","Error","Footer","Main","weather","setWeather","city","setCity","error","setError","api_call","e","preventDefault","location","target","elements","value","API_KEY","url","request","get","response","data","main","console","log","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;AAEA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,EAAtC;AAEA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,EAAhC;AAEA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,EAAlC;AAEA;;;AAIA;;AAEA,QAAMkB,QAAQ,GAAG,MAAOC,CAAP,IAAa;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,QAAQ,GAAGF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,QAAlB,CAA2BG,KAA5C;AACA,QAAI,CAACH,QAAL,EAAe,OAAOJ,QAAQ,CAAC,wBAAD,CAAf;AACfJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMY,OAAO,GAAG,kCAAhB;AACA,UAAMC,GAAG,GAAI,qDAAoDL,QAAS,UAASI,OAAQ,eAA3F;AACA,UAAME,OAAO,GAAG1B,KAAK,CAAC2B,GAAN,CAAUF,GAAV,CAAhB,CAP4B,CAQ5B;;AACA,UAAMG,QAAQ,GAAG,MAAMF,OAAvB;AACAd,IAAAA,UAAU,CAACgB,QAAQ,CAACC,IAAT,CAAcC,IAAf,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACC,IAArB;AACAf,IAAAA,OAAO,CAACc,QAAQ,CAACC,IAAT,CAAcI,IAAf,CAAP;AACAjB,IAAAA,QAAQ,CAACY,QAAQ,CAACb,KAAV,CAAR;AACD,GAdD;;AAeAJ,EAAAA,OAAO,IAAIoB,OAAO,CAACC,GAAR,CAAYrB,OAAZ,CAAX,CA5BiB,CA8BjB;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEM,MAAAA,QAAF;AAAYN,MAAAA,OAAZ;AAAqBE,MAAAA,IAArB;AAA2BE,MAAAA;AAA3B,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGJ,OAAO,iBAAI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHd,EAIGI,KAAK,iBAAI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJZ,CAHF,eASE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CAHF,CADF;AAiBD,CApDD;;AAsDA,eAAeL,IAAf","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Context from \"../Context\";\nimport Header from \"./Header\";\nimport Tagline from \"./Tagline\";\nimport Content from \"./Content\";\nimport WeatherSearch from \"./WeatherSearch\";\nimport WeatherData from \"./WeatherData\";\nimport DateTime from \"./DateTime\";\nimport Error from \"./Error\";\nimport Footer from \"./Footer\";\n\n//this file contains all the core functionality for this app\n\n//it is the convention to make certain variables uppercase and anything you store your API KEYS inside of just tends to be uppercase ---> it is just a convention\n\nconst Main = () => {\n  const [weather, setWeather] = useState();\n\n  const [city, setCity] = useState();\n\n  const [error, setError] = useState();\n\n  /*this is the same as this:\n  const weather = useState [0] ---> 'weather' is the name of our state\n  const setWeather = useState [1] ---> 'setWeather' is the function that you can use in order to update the state | this second argument acts like the setState method in the Class Components */\n\n  //this syntax is known as array destructuring in JavaScript\n\n  const api_call = async (e) => {\n    e.preventDefault();\n    const location = e.target.elements.location.value;\n    if (!location) return setError(\"Please enter location.\");\n    setWeather(null);\n    const API_KEY = \"8e0aa905ce144f49bf1a5f4c95149722\";\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${API_KEY}&units=metric`;\n    const request = axios.get(url);\n    //axios is a promise-based library\n    const response = await request;\n    setWeather(response.data.main);\n    console.log(response.data);\n    setCity(response.data.name);\n    setError(response.error);\n  };\n  weather && console.log(weather);\n\n  // useEffect(() => {\n  //   api_call();\n  // }, []);\n  // this empty array argument is going to make sure that this useEffect hook acts like the componentDidUpdate; it isn't really a good idea to compare hooks to life cycle methods: yes, they do behave similarly but they should be looked at as their own entity. So here we are telling this useEffect hook to only execute this api_call method when the Main component first renders onto the screen, and we are doing that by giving it a second argument, which is an empty array\n\n  return (\n    <div className=\"main\">\n      <Header />\n\n      <Content>\n        <DateTime />\n        <Tagline />\n        <Context.Provider value={{ api_call, weather, city, error }}>\n          <WeatherSearch />\n\n          {weather && <WeatherData />}\n          {error && <Error error={error} />}\n        </Context.Provider>\n        <Footer />\n      </Content>\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}