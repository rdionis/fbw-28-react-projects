{"ast":null,"code":"var _jsxFileName = \"/home/dcist123/Documents/fbw-28/REACTJS/react-projects/weather-app-starter/src/components/Main.jsx\";\nimport React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Content from \"./Content\";\nimport WeatherSearch from \"./WeatherSearch\"; //this file contains all the core functionality for this app\n\nconst API_KEY = \"8e0aa905ce144f49bf1a5f4c95149722\"; //it is the convention to make certain variables uppercase and anything you store your API KEYS inside of just tends to be uppercase ---> it is just a convention\n\nconst Main = () => {\n  const api_call = async () => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=Berlin&appid=${API_KEY}`;\n    const request = axios.get(url); //axios is a promise-based library\n\n    const response = await request;\n    console.log(response);\n  };\n\n  useEffect(() => {\n    api_call();\n  }, []); // this empty array argument is going to make sure that this useEffect hook acts like the componentDidUpdate; it isn't really a good idea to compare hooks to life cycle methods: yes, they do behave similarly but they should be looked at as their own entity. So here we are telling this useEffect hook to only execute this api_call method when the Main component first renders onto the screen, and we are doing that by giving it a second argument, which is an empty array\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(WeatherSearch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Main;","map":{"version":3,"sources":["/home/dcist123/Documents/fbw-28/REACTJS/react-projects/weather-app-starter/src/components/Main.jsx"],"names":["React","useEffect","axios","Header","Content","WeatherSearch","API_KEY","Main","api_call","url","request","get","response","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CACA;;AAEA,MAAMC,OAAO,GAAG,kCAAhB,C,CAEA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,QAAQ,GAAG,YAAY;AAC3B,UAAMC,GAAG,GAAI,kEAAiEH,OAAQ,EAAtF;AACA,UAAMI,OAAO,GAAGR,KAAK,CAACS,GAAN,CAAUF,GAAV,CAAhB,CAF2B,CAEK;;AAChC,UAAMG,QAAQ,GAAG,MAAMF,OAAvB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,GALD;;AAOAX,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT,CARiB,CAWjB;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAQD,CArBD;;AAuBA,eAAeD,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Content from \"./Content\";\nimport WeatherSearch from \"./WeatherSearch\";\n//this file contains all the core functionality for this app\n\nconst API_KEY = \"8e0aa905ce144f49bf1a5f4c95149722\";\n\n//it is the convention to make certain variables uppercase and anything you store your API KEYS inside of just tends to be uppercase ---> it is just a convention\n\nconst Main = () => {\n  const api_call = async () => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=Berlin&appid=${API_KEY}`;\n    const request = axios.get(url); //axios is a promise-based library\n    const response = await request;\n    console.log(response);\n  };\n\n  useEffect(() => {\n    api_call();\n  }, []);\n  // this empty array argument is going to make sure that this useEffect hook acts like the componentDidUpdate; it isn't really a good idea to compare hooks to life cycle methods: yes, they do behave similarly but they should be looked at as their own entity. So here we are telling this useEffect hook to only execute this api_call method when the Main component first renders onto the screen, and we are doing that by giving it a second argument, which is an empty array\n\n  return (\n    <div className=\"main\">\n      <Header />\n      <Content>\n        <WeatherSearch />\n      </Content>\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}